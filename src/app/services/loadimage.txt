// IMPORTANT: To work, it needs to execute the following command in the project: 
// npm install @types/lodash

// The controller where the function imaged is loaded must include the following: 
//
// * An attribute called "article" of type Article, which must contain all information of the article (see news.service.ts for details)
// * Three attributes as follows:
//  
// imageError: string;
// isImageSaved: boolean;
// cardImageBase64: string; 

// * Function "fileChangeEvent", which reads the file introduced by the user, converts it into base64 and updates the following attributes: 
//
// this.cardImageBase64
// this.isImageSaved
// this.article.image_media_type 
// this.article.image_data

  fileChangeEvent(fileInput: any) {
    this.imageError = null;
    if (fileInput.target.files && fileInput.target.files[0]) {
      // Size Filter Bytes
      const MAX_SIZE = 20971520;
      const ALLOWED_TYPES = ['image/png', 'image/jpeg'];

      if (fileInput.target.files[0].size > MAX_SIZE) {
        this.imageError =
          'Maximum size allowed is ' + MAX_SIZE / 1000 + 'Mb';
        return false;
      }
      if (!_.includes(ALLOWED_TYPES, fileInput.target.files[0].type)) {
        this.imageError = 'Only Images are allowed ( JPG | PNG )';
        return false;
      }
      const reader = new FileReader();
      reader.onload = (e: any) => {
        const image = new Image();
        image.src = e.target.result;
        image.onload = rs => {
          const imgBase64Path = e.target.result;
          this.cardImageBase64 = imgBase64Path;
          this.isImageSaved = true;

          this.article.image_media_type = fileInput.target.files[0].type;
          const head = this.article.image_media_type.length + 13;
          this.article.image_data = e.target.result.substring(head, e.target.result.length);

        };
      };
      reader.readAsDataURL(fileInput.target.files[0]);
    }
    return true;
  }
